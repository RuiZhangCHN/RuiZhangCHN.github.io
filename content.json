{"posts":[{"title":"深度强化学习算法的需求分析","text":"深度强化学习技术作为对话策略学习领域一项常用的技术，在我过往的研究经历中也曾大量运用，但是当时在构建和设计深度强化学习模型的时候是基于其他人的研究工作进一步深入探索，很少有机会站在更高的视角去看待深度强化学习这一技术。最近，我阅读了魏宁所著的《深度强化学习落地指南》这本书，感触颇深，因此希望通过对书本内容的梳理，结合自己在任务型对话策略构建过程中的一些浅见谈谈自己的理解。另外我觉得《深度强化学习落地指南》这本书写的非常好，深入浅出且面面俱到，在研究和实践过程中有涉及到深度强化学习技术的读者不妨读一读，许多技术和方案可以据此按图索骥，举一反三。本篇博文基于该书的第一章部分整理，涉及如何选择是否使用DRL技术，以及对该技术的选取在不同维度上的必要性进行分析。 在本书中，魏宁老师将算法工程师的能力归纳为三点： 对各种算法本质及其能力边界的深刻理解 对目标问题内在逻辑的深度分析 对两者结合点的敏锐直觉 其中特别提及的是对于算法能与不能的边界要有清晰的认知，不能当一个挥舞着DRL铁锤的人，将各种问题都看成钉子。深度强化学习算法有着自身的优势和局限性，因此必须对具体的问题进行具体分析。不是所有的需求都适合用DRL解决，适合用DRL解决的需求在性能上也未必超越传统方法。因此，魏宁老师在需求分析阶段提出了四个问题：“是不是”、“值不值”、“能不能”和“边界在哪里”。当然，不只是对于DRL，其实对于一个合格的算法工程师而言，在特定的需求问题面前进行技术分析的时候，都需要对上面四个问题进行解答，才能够确保最终选取的技术方案能够很好地适配目标任务。 1. DRL的“是不是”解决DRL问题首先需要明确Agent和环境的关系。通常情况下DRL任务中有且仅有一个进行决策和行为的主体，我们将其称之为Agent，而将与该Agent进行交互的外部元素称为环境。在更加复杂的问题场景中，一个庞大的系统可能由多个Agent组成（例如一个物流站点自动运输机器人阵列），这种情况下就会存在两套不同的Agent定义方案。第一种思路是将所有的Agent看作一个整体，就像人的双手和双脚可以在大脑的控制下独立活动，同时对于一个人类个体来说它们又是整体的一部分。这种思路能够保证取得全局最优的联合策略，但是其状态空间的维度和策略的复杂度会随着决策主体数量的增加而迅速膨胀，导致算法很难被扩展到大规模问题上。第二种思路则是将每个决策主体都视为独立的Agent，就形成了经典的多智能体强化学习（MARL）问题。这种思路能够避免维度诅咒，但随之而来则会面临Agent间的贡献度分配和联合探索难题[1,2]，以及多策略协同优化导致的环境不稳定问题[1,3,4]。 另一个需要定义清楚的是当前解决的任务是不是一个强化学习问题。我们常说的马尔可夫决策过程（MDP）和部分可观测马尔可夫决策过程（POMDP）就属于通常意义上的完备强化学习，而实际上还存在着一些其它类型的强化学习问题。例如，当环境中不存在特定状态转移概率分布p(s’|s,a)，或者说状态转移完全随机且与动作无关时，MDP问题将退化为上下文多臂老虎机（CMAB）问题；而进一步的，如果环境中不存在状态的概念，或者说只有一个状态且没有状态转移，问题会进一步退化为多臂老虎机（MAB）问题。CMAB和MAB属于广义的强化学习范畴，且他们都有各自最有针对性的解决方案[5-7]，因此在实践中通常与完备强化学习问题区分开。 2. DRL的“值不值”在使用DRL解决一个初步定义为MDP的任务之前，首先需要判断这个任务通过规则、启发式搜索或者经典的强化学习算法是否能够解决。在一些经典的强化学习示例（如一阶倒立摆）中，这些任务的状态和动作空间维度很小，或者由于附加了限制使得实际解空间非常小，往往能够通过观察分析来总结规律，并通过一系列if-else规则或者启发式搜索来解决这类问题。诸如小车爬坡等任务虽然具有较高的解空间维度，同样可以通过数学建模的方式构建起状态与动作之间的联系来解决。换言之，在使用DRL的实际落地应用中，“应该追求条件允许范围内的最有定制化方案。这些方案可能抓住了底层的物理和数学本质，可能充分挖掘了任务逻辑和先验知识，可能将计算机的强大算力发挥到了极致，甚至可能通过主动设置高度可控的应用场景规避了很多棘手问题，从而使得它们在效率和性能方面具有显著优势”。通过对不同方法的探索，我们能够更直观的认识的现有的方法所能触及的性能上下限，至少可以将已有的方法作为强大的Baseline，帮助我们对DRL的价值进行评估。 与此同时，在解空间可穷举、规模适中的前提下，传统的强化学习算法如Q-Learning和Sarsa等的表现也可能比DRL算法更好。由于Q-Learning和Sarsa以表格形式直接存储和更新状态-动作组合的值估计，不需要通过神经网络拟合，在调参难度和训练稳定性方面往往优于DRL算法。同样的任务采用Q-Learning的表现比DQN更好的情况时有发生，这是由于在规模可控的任务解空间中，神经网络尚不足以表现出相对于表格的优势。 当然，魏宁老师在本书中同样给出了使用DRL的三个理由，原文摘录如下： 难以从庞大的解空间中分析出有效规则和启发式搜索方案，或者解空间中可能存在比已有规则和启发式搜索更好的方案； 解空间维度过高或不可穷举，基于表格值估计的传统强化学习算法（如Q-Learning）在存储空间和计算效率上遇到瓶颈； 类似于二维图像和长跨度时序信息等高位状态信息中包含大量冗余成分，有赖于深度神经网络的强大特征提取能力，从中提炼出有用的高层抽象语义特征，并建立起长期决策相关性。 总结而言，对于DRL是否适合某项任务的落地，其一看是否能够从已知的数据中挖掘到有效的规则和解决方案，强化学习强大的一个地方是能够通过奖励去寻找合适的策略，但是如果这个较优的策略或解法我们已经找到了，并且能够通过一些规则进行描述，则可能不需要用DRL这把牛刀来杀鸡；其二是看基于表格值估计的方法是否存在计算存储瓶颈，因为DRL相比于经典RL算法是对状态和动作进行了低维的向量化表示，能够在一定程度上缓解维度灾难，但同时也可能会需要更多的数据进行语义学习，因此在经典RL算法开销不大的情况下，是不可以轻易忽略经典方法的；其三是看输入特征是否过于庞大，例如电子竞技AI的实现中，画面中包含的信息量非常多，人为进行特征工程的开销将非常高昂。此时我们可以利用深度神经网络的特征提取能力来克服这一困难。 3. DRL的“能不能”除了对使用DRL的必要性进行评估之外，真实的项目落地环境是否满足场景固定和数据廉价两个要求，对于DRL的应用能否开展而言至关重要。前者直接决定了训练后得到的策略能否顺利迁移到部署环境并维持训练阶段所展现出的高性能，而后者决定了是否有充足的数据来保证DRL模型的收敛。 尽管强化学习被批评为唯一允许在训练集上进行测试的算法，在本书的作者看来，DRL与有监督学习一样追求的是独立同分布下的内插泛化能力。相比之下，有监督学习只是对训练集和测试集进行了更加严格的划分而使得两者完全没有交集；而DRL并未违反独立同分布的定义，测试样本在训练过程中出现的概率也会随着任务解空间的增大而下降。考虑到RL问题相比于监督学习更加困难，适当放松训练和测试的限制无可厚非。 而在DRL的实际落地应用中，我们更需要关注的是任务中的“两个一致”是否成立。一方面是状态分布的一致，简而言之就是在训练和测试阶段环境的固有属性需要保持一致。针对这个问题，一种有效手段是对原始信息进行抽象化处理，实现DRL算法的泛化和推广。值得注意的是，并非所有的任务都能通过抽象化预处理来保证状态分布的一致性。例如，如果我们在训练环境中使用地图A来训练扫地机器人，但在生产环境中机器人所在的环境是地图B，就有可能出现策略失效。解决这一问题的方法是在训练环境中使用随机地图进行训练，使得机器人能够学习到更通用的导航知识，从而在同分布的陌生地图上内插泛化。另一方面则是状态转移概率分布一致，也就是要求Agent在任意状态s下采取动作a后，进入下一个状态s’的概率分布p(s’|s,a)保持不变。其实我个人感觉这两个点的核心是一致的，就是训练和测试应该在相同的环境上进行，或者说训练环境要最大限度地与测试环境相接近，否则就会面临现实鸿沟（Reality Gap）问题。解决这个问题的思路，更多的还是通过扩大训练数据的范围，使得Agent在陌生环境也能够应对自如。 这里再结合一下我个人做对话策略模型时的一些例子。事实上我们目前研究对话策略模型的时候都是采用基于规则的用户模拟器来帮助策略的学习，此时由规则操控的用户模拟器不具备多样性，其表现与真实生产环境下的人类用户表现相去甚远。因此我们难免会面临策略模型失效的问题。当然，在我们近期的研究中，我们试图在进行用户的模拟时加入一些用户的性格和情感信息，实现模拟用户的个性化。这一个过程实际上丰富了策略模型所面临的学习环境，加强了策略模型在同分布的数据上的内插泛化能力，从而使得我们的对话策略模型能有更好的表现。 另一方面，由于强化学习缺乏高效的监督信号，DRL始终面临着低样本效率的问题。因此在DRL问题中我们需要从四个维度考量训练数据：多、快、好、费。与此同时，DRL需要Agent在环境中充分探索，在前期策略性能较差时不合理的动作十分普遍。如果直接将其应用于电商、短视频等场景，所带来的较差的用户体验往往会导致客户流失，这意味着直接经济损失，同样也是不可忽略的成本之一。 4. DRL的“边界在哪里”尽管目前端到端的学习是DRL以至于深度学习的发展趋势，但魏宁老师建议在实践中仅把任务的核心功能模块定义为强化学习问题并交给DRL算法解决，而其他次要模块则要根据各自的特点选择最合适的方案，甚至采用多个独立的策略负责不同的功能模块并将其进行组合。这种做法有一些显而易见的好处，包括： 简化复杂任务的问题定义，避免将特点迥异的子功能模块强行糅合处理； 充分利用各种先验知识，从而提高整体性能； 压缩具体问题解空间，降低DRL算法的学习难度 总而言之，尽管End-to-End是目前学术研究的大趋势，在实际项目落地过程中我们仍然需要发挥各种不同算法的优势，取长补短打好组合拳，才能够取得最好的模型效果。 Reference[1] Panait L, Luke S. Cooperative multi-agent learning: The state of the art[J]. Autonomous agents and multi-agent systems, 2005, 11(3): 387-434.[2] Foerster J, Farquhar G, Afouras T, et al. Counterfactual multi-agent policy gradients[C]//Proceedings of the AAAI Conference on Artificial Intelligence. 2018, 32(1).[3] Khan A, Zhang C, Lee D D, et al. Scalable centralized deep multi-agent reinforcement learning via policy gradients[J]. arXiv preprint arXiv:1805.08776, 2018.[4] Al-Shedivat M, Bansal T, Burda Y, et al. Continuous adaptation via meta-learning in nonstationary and competitive environments[J]. arXiv preprint arXiv:1710.03641, 2017.[5] Gittins J C. Bandit processes and dynamic allocation indices[J]. Journal of the Royal Statistical Society: Series B (Methodological), 1979, 41(2): 148-164.[6] Auer P, Cesa-Bianchi N, Fischer P. Finite-time analysis of the multiarmed bandit problem[J]. Machine learning, 2002, 47(2): 235-256.[7] Bubeck S, Munos R, Stoltz G. Pure exploration in finitely-armed and continuous-armed bandits[J]. Theoretical Computer Science, 2011, 412(19): 1832-1852.","link":"/2021/10/28/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"},{"title":"什么是强大的In-Context Learning","text":"随着预训练技术的不断发展，大模型+提示学习涌现出了惊人的推理能力，在2022年引起了学术界和工业界的广泛关注。本文主要梳理了近期了解的关于In-Context Learning的相关研究。 相比于传统的Pretrained Language Model，GPT系列的模型（特别是最新发布的GPT-3.5）展露出了惊人的In-Context Learning（ICL）能力。ICL是指在不进行参数更新的情况下，仅在输入中添加几个示例就能让模型进行学习。这种学习形式具有以下的几个优势：首先，其输入形式是自然语言，方便用户交互，甚至可以将所需知识直接告诉模型；其次，其学习方式更接近与人类，是通过数个样本进行类比，而不是大规模的统计学习；最后，这种方式不需要训练，降低了适配新任务的成本，提升Language Model as a Service （LMaaS）的可行性。 或许是得益于代码生成技术的需求驱动，GPT-3.5的模型将上下文窗口扩展为8192。这极大程度地提高了chatGPT建模长程对话上下文的能力（同时也狠狠吊打了我们之前finetune的LongFormer模型）。从我们对chatGPT的初步实验结果来看，chatGPT确实有极强的记忆能力，能够在十几轮对话之后依然记得第一轮对话中的内容。这种超长程的编码和记忆能力不仅极大地改善了chatbot的用户体验，同时也为更加复杂的in-context学习带来可能。 一方面，in-context学习技术需要我们在输入中对任务进行定义，包括对任务的具体目标进行描述，以及对模型的输入输出进行规范。在某些情况下，chatGPT模型的输出可能与我们的期望不一致，此时我们仍然能够通过交互来修正模型的输出。因此，其长程建模能力为模型理解复杂的任务定义提供了坚实的基础。另一方面，某些in-context学习任务需要提供few-shot样本，这会导致模型的输入长度远超常见的模型设置（如512）。因此，高达8192的上下文窗口也为in-context学习提供了极大的便利。 目前，涉及in-context学习的研究主要可以分为以下几个方向[1]： 通过微调优化in-context学习的效果，这种学习可以看作是对预训练语言模型进行in-context预热（warmup）。具体地，又可以分为有监督训练和自监督训练。有监督方法的一般思路是，将众多NLP任务直接整合为in-context形式来微调模型（例如MetaAI的做法），或者像LaMDA-PT和FLAN等模型一样专注于instruction tuning，通过构建更好的任务描述让模型去理解目标任务。自监督方式则是直接将Language Model任务转化为in-context学习的形式。需要注意的是，ICL warmup不需要使用太多数据，因为相关研究资料显示随着预热数据的增多，模型性能会很快达到瓶颈。 在推理阶段优化in-context学习效果，这里主要是涉及few-shot样本的选取和编排。具体地，又可以分为组织方式和组织格式两个方面。组织方式涉及如何选取few-shot数据样本，可以包括无监督（通过文本表示或者互信息来选取相近样本、通过perplexity等指标选取、先聚类再选取、让LM自行生成样本等）或者有监督（构建判别模型选取更好的样本、转化为强化学习序列决策任务等）不同的样本选取方式。同时，组织方式还涉及样本的排序，可以通过距离度量或者信息熵等方式来调整few-shot样本的顺序。在组织格式方面，则涉及了如何利用提示工程或者目前比较流行的思维链来撰写prompting。 尽管ICL目前展现出了非常惊艳的效果，但其成功的背后原因仍然没有得到很好的解释。目前主流的观点分别认为ICL的成功与训练数据分布、学习机制以及Transformer的结构特性有关。我们仍期待在23年能够涌现出新的工作来解释这一现象。最后，简单总结一下和ICL有关的一些后续较有机会的研究方向，包括：ICL和传统的自回归LM学习有显著的差异，其出现可能会带动新的预训练策略发展、如何将in-context学习能力蒸馏到小模型、如何提升in-context学习对于不同样本的鲁棒性，等等。 Reference[1] Dong Q, Li L, Dai D, et al. A Survey for In-context Learning[J]. arXiv preprint arXiv:2301.00234, 2022.","link":"/2023/01/12/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%BA%E5%A4%A7%E7%9A%84In-Context-Learning/"},{"title":"大模型推理之路：提示学习+思维链","text":"2022年以来，大模型展现出了令人惊艳的思维推理能力。目前，关于大模型具有这类涌现能力的原因依然众说纷纭。一种主流的说法是，大规模预训练语言模型在代码生成任务上的训练为PLM带来了这一特殊能力。支持这一说法的证据包括，GPT-3系列的模型text-davinci-001并不具备链式思维推理能力，而GPT-3.5系列的text-davinci-002模型则突然具备了这一能力。这两个版本除了在训练数据有一定的差异外，最主要的不同在于，text-davinci-002是在使用了代码生成版本的模型code-davinci-002的基础上训练得到的。因此，GPT-3.5涌现的思维链能力有很大可能是从代码生成模型中继承而来。 对于这一说法，我个人也是比较赞同的。包括在之前试用chatGPT的时候，我曾经为chatGPT设计过一个任务，要求模型实现一个“将字符块垒起得到另一个文字”的功能，即：当我们输入“口”时，函数将返回“品”；当我们输入“日”时，函数将返回“晶”；当我们输入“火”时，函数将返回“焱”。当时采用这几个简单的示例教会了chatGPT我们的这一意图，随后我采用了更加复杂的输入进行测试，包括字符“香”、“龍”、“飛”、“鱼”，最后发现模型能够正确地返回字符“馫”、“龘”、“飝”、“鱻”。从这个例子可以看出，chatGPT确实拥有了非常强大的NLU能力，同时这类能力是受到了其代码生成能力支撑的。因为在上述的例子任务中，NLU模型很难学到这些字符之间的关联，因为在语义上这几个字符之间并没有什么联系。 当然，近期我比较关注的还是思维链（Chain-of-Thought，CoT）相关的工作，这里就结合综述文章[1]简单整理下当前在CoT方面的一些研究。关于Chain-of-Thought这个关键词，在Google scholar上甚至难以找到在2021年以前出现的相关工作，可以说这股热潮是在步入2022年后，随着大规模预训练模型的能力涌现才被带动起来的，属于非常新颖的研究领域。目前而言，CoT技术通常与prompting技术相绑定，因为它不可避免的需要依赖大模型强大的自然语言理解和推理技术。从研究分支上而言，CoT、prompting和推理主要涉及以下两个方面： 增强Prompting中的推理策略。 提示工程：提示工程方法的主要思路是对prompting的内容进行设计，具体又可以分为单阶段方法和多阶段方法。常见的单阶段方法包括：添加带有CoT中间推理步骤的样例，通过few-shot学习来诱导模型在生成答案的同时生成推理过程；或者在问题后面拼接“let’s think step by step”来诱导模型进行zero-shot的答案推理。常见的多阶段方法则通常将一个复杂问题分解为多个子问题，每一轮仅回答一个子问题，在下一轮时将先前的问题和答案作为Context传入，例如Google的Least-to-Most Prompting方法[2]。 推理过程优化：推理过程优化主要是对推理过程的质量进行控制，常见的可以分为自优化方法和集成优化方法。自优化方法通常是引入参数化的优化器，在生成推理步骤时对预测概率进行打分或者过滤，预测生成的推理依据是否可接受。集成优化方法则是从多个推理过程中联合得到最终结果，例如Google Brain的自一致性模型[3]。 外部推理引擎：一些研究工作将问答视为复杂系统，因此会将不适用于语言模型的任务（如物理模拟、数学计算等）进行剥离，由外部的专用引擎进行计算后得到结果，而语言模型则主要负责维持对用户意图的追踪。 增强Prompting中的知识。 利用模型内部知识：大模型中富含的隐式知识可以帮助模型生成推理所需的知识或者推理依据，作为prompting信息的一部分； 利用模型外部知识：同样的，可以通过检索来获取外部知识形成提示来增强推理，例如PROMPTPG和Vote-k等方法； 此外，现有的推理基准任务可以分为五个不同的方向：数学推理、常识推理、逻辑推理、符号推理和多模态推理。具体的基准任务数据集如下： 最后，CoT和基于大模型的推理作为一个非常崭新的研究方向，还有非常多的研究问题亟待解决。一些可能的探索方向包括：预训练模型能够实现推理的理论依据是什么？如何降低模型的计算资源实现高效推理？基于PLM的推理技术仍然存在较大的偏见和毒性，如何实现鲁棒、可信、可解释的推理模型？除了文本模态之外，多模态或者交互式的推理是否有可能？大模型的泛化能力能否推广到推理技术？等等。 Reference[1] Qiao S, Ou Y, Zhang N, et al. Reasoning with Language Model Prompting: A Survey[J]. arXiv preprint arXiv:2212.09597, 2022.[2] Zhou D, Schärli N, Hou L, et al. Least-to-Most Prompting Enables Complex Reasoning in Large Language Models[J]. arXiv preprint arXiv:2205.10625, 2022.[3] Wang X, Wei J, Schuurmans D, et al. Self-consistency improves chain of thought reasoning in language models[J]. arXiv preprint arXiv:2203.11171, 2022.","link":"/2023/01/10/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E4%B9%8B%E8%B7%AF%EF%BC%9A%E6%8F%90%E7%A4%BA%E5%AD%A6%E4%B9%A0-%E6%80%9D%E7%BB%B4%E9%93%BE/"}],"tags":[{"name":"LLM","slug":"LLM","link":"/tags/LLM/"},{"name":"In-Context Learning","slug":"In-Context-Learning","link":"/tags/In-Context-Learning/"},{"name":"NLP","slug":"NLP","link":"/tags/NLP/"},{"name":"需求分析","slug":"需求分析","link":"/tags/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"},{"name":"RL","slug":"RL","link":"/tags/RL/"},{"name":"软件工程","slug":"软件工程","link":"/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"Chain-of-Thought","slug":"Chain-of-Thought","link":"/tags/Chain-of-Thought/"},{"name":"ChatGPT","slug":"ChatGPT","link":"/tags/ChatGPT/"}],"categories":[{"name":"自然语言处理","slug":"自然语言处理","link":"/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"},{"name":"强化学习","slug":"强化学习","link":"/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"}],"pages":[{"title":"关于我","text":"我目前在华为技术有限公司担任高级工程师、AI算法研究员，主要涉及智能对话、人工智能生成内容（AIGC）、自然语言处理等研究方向。于2021年获得华南理工大学软件工程直攻博士学位；于2015年获得华南理工大学软件工程工学学士学位。过往的研究方向主要涉及人机对话、强化学习和人工智能等。 以下是我在学术网站上的页面： Google Scholar, Semantic Scholar, DBLP。 研究经历高级工程师、AI算法研究员， 2022.01-至今 &gt; 华为技术有限公司（Huawei） 博士研究生， 2015.09-2021.12 &gt; 华南理工大学（SCUT），软件工程","link":"/about/index.html"},{"title":"论文&amp;项目","text":"已发表论文Automatic Arabic Grammar Correction based on Expectation Maximization Routing and Target-Bidirectional AgreementAiman Solyman, Zhenyu Wang, Qian Tao, Arafat Abdulgader, Rui Zhang, and Zeinab Aleibieid. In Knowledge-Based Systems, 2022. (CCF-C类期刊, JCR Q1, IF=8.139) Emotion-Sensitive Deep Dyna-Q Learning for Task-Completion Dialogue Policy LearningRui Zhang, Zhenyu Wang, Mengdan Zheng, Yangyang Zhao, and Zhenhua Huang. In Neurocomputing, 2021. (CCF-C类期刊, JCR Q1, IF=4.438) Predicting Emotion Reactions for Human-Computer Conversation: A Variational ApproachRui Zhang, Zhenyu Wang, Zhenhua Huang, Li Li, and Mengdan Zheng. In IEEE Transactions on Human-Machine Systems, 2021. (CCF-B类期刊, JCR Q1, IF=3.374) Melodic Phrase Attention Network for Symbolic Data-based Music Genre Classification (Student Abstract)Li Li, Rui Zhang, and Zhenyu Wang. In Proceedings of the AAAI Conference on Artificial Intelligence (AAAI), 2021. (CCF-A类会议) Learning Bi-directional Social Influence in Information Cascades using Graph Sequence Attention NetworksZhenhua Huang , Zhenyu Wang , Rui Zhang, Yangyang Zhao, and Dongfa Zheng. In Companion Proceedings of the Web Conference (WWW), 2020. (CCF-A类会议) Dynamic Reward-based Dueling Deep Dyna-Q: Robust Policy Learning in Noisy EnvironmentsYangyang Zhao, Zhenyu Wang, Kai Yin, Rui Zhang, and Zhenhua Huang. In Proceedings of the AAAI Conference on Artificial Intelligence (AAAI), 2020. (CCF-A 类会议) 基于大规模结构化病例数据的新型冠状病毒传播特征和感染人群分析黄振华, 王振宇, 江莉, 张睿, 雷昶, 刘星炜, and 谢晓辉. In 中国科学: 信息科学, 2020. (CCF-A类中文期刊) 任务型对话系统研究综述赵阳洋, 王振宇, 王佩, 杨添, 张睿, and 尹凯. In 计算机学报, 2020. (CCF-A类中文期刊) Emotional Text Generation Based on Cross-Domain Sentiment TransferRui Zhang, Zhenyu Wang, Kai Yin, and Zhenhua Huang. In IEEE Access, 2019. (JCR Q1期刊, IF=3.745) Cascade2vec: Learning Dynamic Cascade Representation by Recurrent Graph Neural NetworksZhenhua Huang, Zhenyu Wang, and Rui Zhang. In IEEE Access, 2019. (JCR Q1期刊, IF=3.745) 基于标签深度分析的音乐自动标注算法王振宇, 张睿, 高雨轩, and 萧永乐. In 华南理工大学学报 (自然科学版), 2019. (EI-中文期刊) Learning to Converse Emotionally Like Humans: A Conditional Variational ApproachRui Zhang and Zhenyu Wang. In CCF International Conference on Natural Language Processing and Chinese Computing (NLPCC), 2018. (CCF-C类会议) Building Emotional Conversation Systems using Multi-task Seq2Seq LearningRui Zhang, Zhenyu Wang, and Dongcheng Mai. In CCF International Conference on Natural Language Processing and Chinese Computing (NLPCC), 2017. (CCF-C类会议) MMCRD: An Effective Algorithm for Deploying Monitoring Point on Social NetworkZehao Guo, Zhenyu Wang, and Rui Zhang. In China Conference on Knowledge Graph and Semantic Computing (CCKS), 2018.(EI会议)","link":"/papers/index.html"}]}