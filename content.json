{"posts":[{"title":"BERT模型Fine-tuning初探","text":"使用BERT模型进行Fine-tuning分类器。 BERT环境搭建首先需要在服务器中创建自己的虚拟环境，如： 1pyenv virtualenv 3.6.6 muenn25 切换到虚拟环境中： 1pyenv activate muenn25 下载BERT项目到指定目录： 1git clone https://github.com/google-research/bert.git /home/zr/bert_tf 跳转到该目录： 1cd /home/zr/bert_tf 下载官方提供的预训练好的bert模型，存储到自己的模型路径。（我的是：/home/zr/bert_trained_models/uncased_L-12_H-768_A-12) BERT模型修改如果新的分类任务也是单标签分类的话，只需要基于run_classifier.py函数下的DataProcessor类定义一个自己的数据处理器。我使用了SemEval的数据进行了简单实验，写了一个新的数据处理器类如下： 12345678910111213141516171819202122232425262728293031class SemProcessor(DataProcessor): &quot;&quot;&quot;Processor for the SemEval data set.&quot;&quot;&quot; def get_train_examples(self, data_dir): return self._create_examples( self._read_tsv(os.path.join(data_dir, 'train.tsv')), 'train') def get_dev_examples(self, data_dir): return self._create_examples( self._read_tsv(os.path.join(data_dir, 'dev.tsv')), 'dev') def get_test_examples(self, data_dir): return self._create_examples( self._read_tsv(os.path.join(data_dir, 'test.tsv')), 'test') def get_labels(self): return [&quot;others&quot;, &quot;happy&quot;, &quot;sad&quot;, &quot;angry&quot;] def _create_examples(self, lines, set_type): examples = [] for (i, line) in enumerate(lines): guid = line[0] text_a = tokenization.convert_to_unicode(line[1]) text_b = None if set_type != 'test': label = tokenization.convert_to_unicode(line[2]) else: label = &quot;others&quot; examples.append( InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label)) return examples 需要注意的是，对于预测时候的test数据集，同样也要给他的label赋一个值，不然模型运行过程中会出错。同时，main函数中也要增加相应的dataProcessor信息： 1234567processors = { &quot;cola&quot;: ColaProcessor, &quot;mnli&quot;: MnliProcessor, &quot;mrpc&quot;: MrpcProcessor, &quot;xnli&quot;: XnliProcessor, &quot;sem&quot;: SemProcessor, # 加入自定义的Processor } 基于BERT的分类模型的运行首先设置预训练好的模型路径BERT_BASE_DIR： 1export MUENN_BERT_BASE_DIR=/home/zr/bert_trained_models/uncased_L-12_H-768_A-12 设置数据路径GLUE_DIR: 1export MUENN_GLUE_DIR=/home/zr/bert_data 运行模型。其中每一个参数都需要按照自己的实际情况修改： 1234567891011121314python run_classifier.py \\--task_name=Sem \\--do_train=true \\--do_eval=true \\--data_dir=$MUENN_GLUE_DIR/SemEval \\--vocab_file=$MUENN_BERT_BASE_DIR/vocab.txt \\--bert_config_file=$MUENN_BERT_BASE_DIR/bert_config.json \\--init_checkpoint=$MUENN_BERT_BASE_DIR/bert_model.ckpt \\--max_seq_length=128 \\--train_batch_size=32 \\--learning_rate=2e-5 \\--num_train_epochs=3.0 \\--output_dir=/home/zr/bert_tf/sem_output/ \\--do_predict=true run_classifier代码浅析BERT源码中run_classifier.py文件是基于BERT模型进行Fine-tuning的核心部分。 其中，如果需要将模型改为自己的分类模型，基本上只需要修改DataProcessor部分的内容。如果需要修改成其他特殊类型的分类器（如，多类标分类，需要采用sigmoid激活函数）则还需要修改create_model方法中的内容。 以下是该代码文件的详细解析。 0.main函数 [Line 741-903] 定义data_processor列表。共有四种processor，对应四种不同数据集: ｛Cola、Mnli、Mrpc、Xnli｝。参见”1.DataProcessor数据处理器”。 [Line 744-749] 判断FLAGS.do_train和FLAGS.do_eval是否至少有一个为True。 [Line 751-753] 从Config文件读取配置信息。 [Line: 755] 判断FLAGS.max_seq_length是否大于config.max_position_embedding，若是则报错（因为无法进行位置Embedding。 [Line: 757-761] 创建输出路径。 [Line: 763] 获取task_name，根据task_name获取processor和label_list。 [Line: 765-772] 创建分词器tokenizer，这里采用FullTokenizer，其他分词器还有BasicTokenizer和WordpieceTokenizer等。[Line: 774-775] 设置tpu相关参数。我们没有tpu，可以忽略。(注：往下几行代码会调用tf.contrib.tpu包下的内容，如果检测到运行环境没有tpu，会自动降级到GPU或者CPU环境运行。) [Line: 777-791] 若FLAGS.do_train参数为True，初始化训练数据train_examples、训练步数num_train_steps和暖启动步数num_warmup_steps。 [Line: 796-800] 调用model_fn_builder函数构建模型，获得一个TPUEstimatorSpec对象。参见”3.model_fn_builder”。 [Line: 802-810] 使用上一步获得的TPUEstimatorSpec对象构建一个TPUEstimator对象，这个对象相当于模型实例。 [Line: 814-820] 若当前为train模式，步骤如下：(a)定义train_file文件为输出路径下的”train.tf_record”文件；(b)调用file_based_convert_examples_to_features函数将InputExample类型数据写入train_file文件；(c)调用file_based_input_fn_builder从train_file文件读取数据，用于训练。[Line: 822-835] 若为eval或predict模式，步骤与train相似，同样是先持久化InputExample数据到本地文件再读取，然后运行。[Line: 837-903] 1.DataProcessor数据处理器 [Line 158-185]将句子分类数据集进行数据转换的基类。 get_train_examples(data_dir) [Line 161-163]从给定路径读取训练集，转换为InputExample类型的数据。 get_dev_examples(data_dir) [Line 165-167]从给定路径读取验证集，转换为InputExample类型的数据。 get_test_examples(data_dir) [Line 169-171]从给定路径读取测试集，转换为InputExample类型的数据。 get_labels() [Line 173-175]获取该数据集的标签列表。 _read_tsv(cls, input_file, quotechar) [Line 178-185]读取一个用“\\t”分割的csv文件。 1.1 XnliProcessor Xnli数据处理器 [Line 188-233]处理XNLI数据集（从init函数看应该是可以处理其他语种，如中文”zh”）。分类标签类别分别是[“contradiction”矛盾, “entailment”蕴含, “neutral”中性]，应该是类似于两个句子间关系的分类任务。 1.2 MnliProcessor Mnli数据处理器 [Line 236-274]处理MultiNLI数据集，应该处理是GLUE版本数据集的数据，分类标签同样是[“contradiction”, “entailment”, “neutral”]。 1.3 MrpcProcessor Mrpc数据处理器 [Line 277-314]处理MRPC数据集，分类标签是[“0”, “1”]。 1.4 ColaProcessor Cola数据处理器 [Line 317-355]处理CoLA数据集，分类标签同样是[“0”, “1”]。 2. model_fn_builder模型函数创建器 [Line: 586-666]该方法实质上返回了一个函数model_fn(features, labels, mode, params)。这个函数的运行过程如下： 从feature中获取四个变量：input_ids、input_mask、segment_ids和label_ids。 [Line: 598-601] 判断当前模型是否为训练模式。 [Line: 603] 调用create_model函数创建模型。参见”4.create_model创建模型” [Line: 605-607] 尝试从已经训练好的checkpoint加载模型。 [Line: 609-623] 在日志中打印可以训练的参数。[Line: 625-631] 如果mode为train，首先定义训练优化器train_op，然后返回一个TPUEstimatorSpec对象output_spec。[Line: 634-643] 如果mode为eval，首先定义评价函数metric_fn，然后定义评价指标参数eval_metrics，最终返回一个TPUEstimatorSpec对象output_spec。 [Line: 644-660] 若mode不为上述两种，则直接返回一个TPUEstimatorSpec对象output_spec。[Line: 661-663] 3.create_model创建模型 [Line: 541-583]该方法包含以下步骤： 构建一个modeling.BertModel对象。 [Line: 544-550] 获取pooled_output（即最后一个输出层的特殊分类token的结果。如果需要输出序列的结果，如进行序列标注任务，则需要使用get_sequence_output方法） [Line: 557] 定义hidden_size、output_weights和output_bias。这几个变量是用于构建一个新的分类层作Fine-tuning。 [Line: 559-566] 对output_layer结果进行Dropout。 [Line: 569-571] 进行最后一个全连接层的计算。 [Line: 573-576] 计算loss。 [Line: 578-581] 返回loss平均损失、per_example_loss逐个样例的损失、logits输出层原始结果、probabilities进行归一化之后的结果。[Line: 583]","link":"/2018/11/21/BERT%E6%A8%A1%E5%9E%8BFine-tuning%E5%88%9D%E6%8E%A2/"},{"title":"Mac下卸载&#x2F;更新numpy","text":"今天安装PyTorch的时候发现numpy模块需要更新，使用pip install -U numpy的时候发现有些操作被系统禁止了（不是sudo权限的原因）。百度了一下发现是系统的安全机制引起的。具体的解决方案如下： 重启电脑，重启时按住command+R 进入“OS X工具程式”界面，打开终端，输入csrutil，重启电脑即可。 Reference[1] Mac环境下，numpy升级问题。[link]","link":"/2017/01/19/Mac%E4%B8%8B%E5%8D%B8%E8%BD%BD-%E6%9B%B4%E6%96%B0numpy/"},{"title":"BlenderBot3: 持续参与学习的对话代理","text":"BlenderBot3 (BB3) 的核心是一个Transformer模型，采用一系列模块生成对话响应，每个模块都是一个Seq2Seq任务。当一个给定的模块（如生成互联网搜索查询）被执行时，其输出会被送到下一个模块来帮助产生响应。BB3模型是基于其前身BB1、BB2模型，以及Meta过往的工作K2R和SeeKeR等。 （一）工作基础在进入BB3之前，我们先了解一下过往的那些基础工作。首先是K2R[1]，这个模型非常直观，是一个经典的Encoder-Decoder模型，一共做了两件事：（1）输入原始的用户查询，输出相应的知识片段；（2）输入原始用户查询+知识片段，输出系统响应。如图1所示： 由于知识片段可以用特殊的标记符号进行分割，所以实际上K2R中做这两件事情的可以是同一个模型。同时，作者观察到模型很容易过分依赖于训练期间的Ground-truth知识，所以引入了一个随机错误知识采样，加入了不同的知识置信度以帮助模型区分哪些知识是有用的。 在K2R模型的基础上，Meta又提出了SeeKeR模型[2]。该模型在K2R的基础上增加了一个搜索过程，如图2所示： SeeKeR模型的核心架构是一个Transformer，它既可以是Encoder-Decoder结构，也可以是Decoder-only结构。对于每个模块而言，不同的地方仅仅在于输入中包含的特殊字符。换言之，可以利用任务相关的特殊字符来唤醒相应的任务。 搜索模块：给定编码的输入上下文，生成一个搜索查询。然后将查询语句输入到Bing Web Search API搜索引擎中，搜索引擎以一组文档的形式返回搜索结果，然后再通过与Common Crawl进行交互来过滤文档集，并选取top 5。 知识模块：给定编码的输入上下文和检索到的文档，生成一个知识响应。该知识响应是由检索到的文档中的一个或者多个相关的短语或者句子组成。对于Encoder-Decoder架构，Encoder端将采用融合解码器（Fusion-in-Decoder, FiD）来实现对话上下文和文档的混合编码；对于Decoder-only架构，则直接将文档打包添加到上下文中。本质上，这是一个“复制”任务，因为所有的token都是从文档中复制的。 响应模块：给定编码的输入上下文和知识片段，生成最终响应。相比于传统端到端的方法，SeeKeR模型将知识获取、合成和答案生成三个任务进行拆解，使得模型更容易学习到这三个过程。 （二）BB3模块BB3是一个模块化系统，但其中的模块并不是独立的组件，而是类似于K2R或者SeeKeR一样是用同一个Transformer模型加上类似于Prompting的机制，通过某些特殊字符来唤醒模型执行相应的功能。此外，输入上下文还包含对话历史，因此输入会带上用户的id前缀（例如Person 1和Person 2）。该模型共包含以下模块： 网络搜索决策：给定context的最后一轮，输出当前是否需要进行网络搜索； 生成网络搜索查询：给定完整的context输入，生成需要发送给搜索引擎的搜索查询； 网络搜索：这部分不是采用Transformer，而是调用实际的互联网搜索引擎。它范围N个文档/代码片段。这里是用了Mojeek（而不是SeeKeR里面的Bing Web Search API）； 生成知识回复：给定context和documents，生成一个知识序列； 抽取相关实体：给定完整context，生成用于产生最终回复的相关实体； 生成长期记忆：给定context的最后一轮，调用模型[3]生成过往对话的一个persona摘要； 长期记忆访问决策：给定context的最后一轮和存储的记忆，输出当前是否需要访问长期记忆信息； 长期记忆访问：给定context和长期记忆，输出一个记忆片段（称之为召回记忆）。这里包含了FiD和OPT的实现。 生成对话回复：给定context和可选的知识片段、记忆片段，生成最终的对话响应。 随后，BB3采用了大量的公开数据集对上述模块进行了Pre-train和Fine-tuning，这里不再赘述。 （三）安全性BB3模型除了采用BB2种的“baked-in safety”训练机制之外，还训练了一个安全分类器来识别可能产生的有害对话。这里采用了Wikipedia Toxic Comments数据集、Build-It Break-It Fix-It数据集和Bot Adversarial Dialogue数据集来训练二分类模拟器。此外，还采用了关键字列表来标记可能不适当的响应。另外还对涉及自残意图和新冠病毒医疗问题等主题进行了明确检查。最后，BB3提供了反馈机制允许用户报告不合理的响应。 （四）持续学习最后是BB3中预留了一些收集用户反馈的功能，同来支撑模型后续的持续学习，这部分就不展开了。 Reference[1]]Adolphs L, Shuster K, Urbanek J, et al. Reason first, then respond: Modular generation for knowledge-infused dialogue[J]. arXiv preprint arXiv:2111.05204, 2021.[2] Shuster K, Komeili M, Adolphs L, et al. Language models that seek for knowledge: Modular search &amp; generation for dialogue and prompt completion[J]. arXiv preprint arXiv:2203.13224, 2022.[3] Xu J, Szlam A, Weston J. Beyond Goldfish Memory: Long-Term Open-Domain Conversation[C]//Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). 2022: 5180-5197.","link":"/2022/11/11/BlenderBot3-%E6%8C%81%E7%BB%AD%E5%8F%82%E4%B8%8E%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%AF%B9%E8%AF%9D%E4%BB%A3%E7%90%86/"},{"title":"MetaLM：将语言模型作为通用交互接口","text":"MetaLM建议使用LM作为各种基础模型的通用接口。其中，一组预先训练的编码器可以感知不同模态的输入，他们与一个扮演通用任务层角色的LM进行对接。论文提出一个半因果语言建模目标来联合预训练接口（Decoder）和模块化编码器（Encoder），从而结合因果模型和非因果模型的优势。具体而言，因果语言模型具有Context学习和开放式生成能力；而非因果模型采用了双向编码器，有利于微调。 （一）设计原则 将语言模型作为通用任务层：LM可以作为语言/视觉/多模态任务的通用接口，因为其具有开放的输出空间，可以推广到广泛任务。此外，借助通用任务层，预测过程可以超越单一任务，在LM的基础上，基于历史上下文建立多轮对话接口。 因果语言建模（即单向解码器）有利于zero-shot泛化和上下文学习：因果语言建模相比于MLM有良好的样本效率和诱导偏差，因此可以通过因果建模提高在few-shot场景的效果。同时，上下文学习时的能够轻松地调整预训练模型或微调模型来适应新的场景。 非因果建模（即双向编码器）有利于跨任务、跨语言和跨模态：通过MLM预先训练的双向编码器可以获得更好的微调性能，一旦给出全部输入，非因果模型能够合理地编码数据，因为所有的上下文都可以被相互访问，而因果建模只能逐个使用历史标记。微调的优势对于有丰富标注数据的任务很有帮助。此外，使用MLM目标预训练的非因果编码器在跨语言迁移方面有更好的表现。 半因果语言建模作为元预训练任务：半因果语言模型起着将非因果编码器和因果语言模型连接在一起的作用。从通用接口预训练的意义上讲，它是一个元任务。具体而言，非因果编码器学习各种输入数据的表示，而因果解码器充当通用任务层。相比于前缀语言模型或者T5，MetaLM非因果地编码整个序列的随机跨度，而使用因果解码器生成剩余的部分。此外，在架构上，直接将非因果编码器的输出给输入到因果解码器中，而不是依赖于交叉注意力。最后，因果解码器可以安装多个双向编码器，而传统的Encoder-Decoder通常只能有一个编码器。 非因果编码器作为系统1，因果语言模型作为系统2：认知通常分为两个层次-系统1（直觉和无意识）和系统2（顺序、有意识、计划和推理）。可以认为所提出的框架包含了这两个级别的实现。在使用非因果编码器进行输入表示后，利用因果模型作为系统2来进行常识推理和规划任务。 用户和预训练模型之间的自然语言接口：基于因果建模的通用任务层使得用户能够用自然语言与预先训练的非因果编码器进行交互。首先，语言可以作为底层预训练或微调模型的编程语言（例如，可以编写基于文本的指令和解释来重新定位和指导模型行为）。其次，通用接口使得模型能够使用自由文本展示结果，期预测更加可以理解和解释。最后，上述框架支持多轮对话交互。 ###（二）MetaLM MetaLM的框架如图2所示。具体而言，一组经过预训练的能够感知不同模态的编码器将与语言模型对接，而语言模型则担任通用任务接口，将各类任务统一为自由文本生成。为了预训练MetaLM，采用半因果语言建模任务联合学习上述模块。 2.1 输入表示MetaLM的输入表示分为两类： 一类是由底层编码器获得的上下文表示，然后由一个connector层进行投影。如图2中的图片块和x7,x8采用双向视觉文本编码器编码。 另一类是文本的token embedding。如图2中的x5,x6。 在传递到通用接口之前，这两种类别的表示是利用position embedding来加和的。 2.2 模型架构 图3展示了四种不同类型的LM架构，MetaLM采用的是架构(d)。在因果模型和非因果编码器之间，采用connector进行投影，使得基础模型的输出尺寸能够与通用任务层相匹配。 2.3 半因果语言建模目标为了对MetaLM进行预训练，文章引入了semi-causal语言建模目标。如图2所示，预训练目标自回归地（单向地）生成token序列，而其中的某些span则采用双向编码器来表示。 给定一个输入序列x={x_1, x_2, …, x_n}，假定其中包含k个非因果span。对于每个非因果span，采用双向编码器获得其向量表示。这里需要基于非因果span的具体模态选取双向编码器。随后，模型就可以利用下面的半因果语言模型目标进行训练。对于每个非因果span，模型只在最后一个span位置进行相应的生成。 （三）纯文本任务和视觉-文本任务实验实验部分比较多，就不展开了，具体可以查看原文实验部分。实验主要分为纯文本任务(图5)和视觉-文本任务(图6)。 其中，纯文本任务可以分为以下几种： Multitask Learning / Instruction Tuning: 类似于前缀Prompting的形式，Context和Prompt Template都使用非因果编码器编码，然后使用SCLM进行解码； Multi-Turn Dialogue: 多轮对话，使用非因果编码器编码用户输入，用SCLM解码系统响应； Zero-Shot Priming: 直接询问模型一些知识问题，采用非因果编码器编码查询； In-Context Learning: 类似于带example的前缀prompting方法。 视觉-文本任务主要包括以下几种： Zero-shot Priming: 类似于Prompting的方法；Few-shot Learning: 类似于带example的前缀Prompting方法；Finetuning: 与Zero-shot Priming相似，模型学习方式不同；Multi-turn Dialogue: 支持多种模态的多轮对话；Finetuning with Explanations: 带解释实例的生成。 （四）结论文章提出了一种通用的语言大模型，可以将不同模态的任务通过非因果编码器和因果解码器结合，从而实现对不同类型的任务进行学习。实验结果表明，上述方法相比于GPT模型，在多项文本任务上取得了显著的性能提升，并且具有更加通用的任务解决能力。 Reference[1] Hao Y, Song H, Dong L, et al. Language models are general-purpose interfaces[J]. arXiv preprint arXiv:2206.06336, 2022.","link":"/2022/11/08/MetaLM%EF%BC%9A%E5%B0%86%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E4%BD%9C%E4%B8%BA%E9%80%9A%E7%94%A8%E4%BA%A4%E4%BA%92%E6%8E%A5%E5%8F%A3/"},{"title":"Windows7-32bit xgboost环境搭建","text":"由于陈天奇大神在xgboost后来的版本中拿掉了windows文件夹，所以刚上手xgboost安装的时候根本用不了网上教程中使用VS编译方法。直到看到Stackoverflow上面的这个问答，才真正解决了问题。话不多说，以下是完整的解决方案。 12git clone https://github.com/dmlc/xgboostgit checkout 9bc3d16 使用VS打开xgboost/windows文件夹中的项目sln文件。在VS中，点击Build/Configuration Manager。将Active solution configuration改为Release。（如果是64-bit系统，将Active solution platform改为x64） 1Rebuild xgboost, xgboost_wrapper 随后将xgboost/windows/xgboost/Release里面的所有文件拷贝到目录xgboost/windows/xgboost_wrapper文件夹中。回到xgboost/python-package，运行命令python setup.py install，一般这一步就能成功了。 最后，检查xgboost是否安装成功，运行python -c “import xgboost”。 Reference[1] “How to install xgboost package in python (windows platform)?”, [link]","link":"/2016/05/19/Windows7-32bit-xgboost%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"title":"【论文】Knowledge-augmented Frame Semantic Parsing with Hybrid Prompt-tuning","text":"[快讯]近期有一篇一作论文被ICASSP2023会议接收。后续将在本文更新该论文的相关细节，敬请关注。","link":"/2023/02/16/%E3%80%90%E8%AE%BA%E6%96%87%E3%80%91Knowledge-augmented-Frame-Semantic-Parsing-with-Hybrid-Prompt-tuning/"},{"title":"什么是强大的In-Context Learning","text":"随着预训练技术的不断发展，大模型+提示学习涌现出了惊人的推理能力，在2022年引起了学术界和工业界的广泛关注。本文主要梳理了近期了解的关于In-Context Learning的相关研究。 相比于传统的Pretrained Language Model，GPT系列的模型（特别是最新发布的GPT-3.5）展露出了惊人的In-Context Learning（ICL）能力。ICL是指在不进行参数更新的情况下，仅在输入中添加几个示例就能让模型进行学习。这种学习形式具有以下的几个优势：首先，其输入形式是自然语言，方便用户交互，甚至可以将所需知识直接告诉模型；其次，其学习方式更接近与人类，是通过数个样本进行类比，而不是大规模的统计学习；最后，这种方式不需要训练，降低了适配新任务的成本，提升Language Model as a Service （LMaaS）的可行性。 或许是得益于代码生成技术的需求驱动，GPT-3.5的模型将上下文窗口扩展为8192。这极大程度地提高了chatGPT建模长程对话上下文的能力（同时也狠狠吊打了我们之前finetune的LongFormer模型）。从我们对chatGPT的初步实验结果来看，chatGPT确实有极强的记忆能力，能够在十几轮对话之后依然记得第一轮对话中的内容。这种超长程的编码和记忆能力不仅极大地改善了chatbot的用户体验，同时也为更加复杂的in-context学习带来可能。 一方面，in-context学习技术需要我们在输入中对任务进行定义，包括对任务的具体目标进行描述，以及对模型的输入输出进行规范。在某些情况下，chatGPT模型的输出可能与我们的期望不一致，此时我们仍然能够通过交互来修正模型的输出。因此，其长程建模能力为模型理解复杂的任务定义提供了坚实的基础。另一方面，某些in-context学习任务需要提供few-shot样本，这会导致模型的输入长度远超常见的模型设置（如512）。因此，高达8192的上下文窗口也为in-context学习提供了极大的便利。 目前，涉及in-context学习的研究主要可以分为以下几个方向[1]： 通过微调优化in-context学习的效果，这种学习可以看作是对预训练语言模型进行in-context预热（warmup）。具体地，又可以分为有监督训练和自监督训练。有监督方法的一般思路是，将众多NLP任务直接整合为in-context形式来微调模型（例如MetaAI的做法），或者像LaMDA-PT和FLAN等模型一样专注于instruction tuning，通过构建更好的任务描述让模型去理解目标任务。自监督方式则是直接将Language Model任务转化为in-context学习的形式。需要注意的是，ICL warmup不需要使用太多数据，因为相关研究资料显示随着预热数据的增多，模型性能会很快达到瓶颈。 在推理阶段优化in-context学习效果，这里主要是涉及few-shot样本的选取和编排。具体地，又可以分为组织方式和组织格式两个方面。组织方式涉及如何选取few-shot数据样本，可以包括无监督（通过文本表示或者互信息来选取相近样本、通过perplexity等指标选取、先聚类再选取、让LM自行生成样本等）或者有监督（构建判别模型选取更好的样本、转化为强化学习序列决策任务等）不同的样本选取方式。同时，组织方式还涉及样本的排序，可以通过距离度量或者信息熵等方式来调整few-shot样本的顺序。在组织格式方面，则涉及了如何利用提示工程或者目前比较流行的思维链来撰写prompting。 尽管ICL目前展现出了非常惊艳的效果，但其成功的背后原因仍然没有得到很好的解释。目前主流的观点分别认为ICL的成功与训练数据分布、学习机制以及Transformer的结构特性有关。我们仍期待在23年能够涌现出新的工作来解释这一现象。最后，简单总结一下和ICL有关的一些后续较有机会的研究方向，包括：ICL和传统的自回归LM学习有显著的差异，其出现可能会带动新的预训练策略发展、如何将in-context学习能力蒸馏到小模型、如何提升in-context学习对于不同样本的鲁棒性，等等。 Reference[1] Dong Q, Li L, Dai D, et al. A Survey for In-context Learning[J]. arXiv preprint arXiv:2301.00234, 2022.","link":"/2023/01/12/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%BA%E5%A4%A7%E7%9A%84In-Context-Learning/"},{"title":"在PyPI社区发布自己的第一个Demo项目","text":"最近突然发觉自己使用了很久的Python之后也没有发布过自己的项目。本着自己差不多也快毕业了，以后有机会真正自己造轮子的想法，准备今天尝试在PyPI社区一次发布一次自己的项目。另外一个原因也是想了解一下在发布python package的时候会自动生成哪些文件，这样平时用别人的开源包的时候可以直接跳过这些文件进行阅读。所以这篇文章的主要目的是记录一下怎么在PyPI社区上发布自己的项目。 前期准备在使用PyPI社区发布自己的项目之前，首先需要有一个PyPI社区的帐号和一个开源代码平台（比如本文以Github为例）的帐号。我之前是没有PyPI社区账号的，所以我今天临时申请了一个新账号。注意注册了新的PyPI帐号之后要进行邮箱验证，没有经过邮箱验证的PyPI帐号没有办法发布自己的项目。 这里假定大家都已经安装了git工具。另外我们还需要安装一个叫做twine的python包，这个包是到时候用来上传到PyPI时需要依赖的一个工具。直接使用pip安装就可以了： 1pip install twine 到这里，前期环境的准备工作基本就完成了。 新建项目/代码编写首先我们Github上创建一个新的项目，比如说我的项目叫MyFirstPypiDemo。不出意外地我们将他clone到本地，然后使用PyCharm打开。 为了做一个简单演示我们就创建一个hello world吧。首先我新建了一个myfirstpypidemo.py文件（注：这里特意取了一个非常长而且不太容易跟其他packege重复的名字，方便后面演示），然后我们实现一个能够打印hello world的简单函数： 12345678# myfirstpypidemo.py__version__ = '0.1.0'def print_hello(): print('hello world')if __name__ == '__main__': pass 到这里为止我们的项目就编写完了，接下来要对项目进行配置。 项目配置在PyPI上发布自己的项目的关键在于配置好setup.py。这里有一个非常方便的setup.py模板，我们直接把它copy过来然后按照自己的需求进行修改就好了。 需要关注的是以下几个部分的细节。 项目的配置信息1234567NAME = 'mypackage'DESCRIPTION = '填写你的项目简短描述.'URL = 'https://github.com/你的github账户/mypackage'EMAIL = 'me@example.com' # 你的邮箱AUTHOR = 'Awesome Soul' # 你的名字REQUIRES_PYTHON = '&gt;=3.6.0' # 项目支持的python版本VERSION = '0.1.0' # 项目版本号 这个叫做NAME的东西直接关系到后面我们使用pip install的时候对应的这个项目叫什么名字。由于我这里写了一个非常简单的demo，我们还是起一个长而无用的名字吧，比如把它叫做“zrchnpypidemo”。 依赖库1234# What packages are required for this module to be executed?REQUIRED = [ # 'requests', 'maya', 'records',] 这里既然没有依赖其他的库我们就不填了。 setup部分123456789101112131415161718192021222324252627282930313233343536setup( name=NAME, version=about['__version__'], description=DESCRIPTION, long_description=long_description, long_description_content_type='text/markdown', author=AUTHOR, author_email=EMAIL, python_requires=REQUIRES_PYTHON, url=URL, packages=find_packages(exclude=[&quot;tests&quot;, &quot;*.tests&quot;, &quot;*.tests.*&quot;, &quot;tests.*&quot;]), # If your package is a single module, use this instead of 'packages': # py_modules=['mypackage'], # entry_points={ # 'console_scripts': ['mycli=mymodule:cli'], # }, install_requires=REQUIRED, extras_require=EXTRAS, include_package_data=True, license='MIT', classifiers=[ # Trove classifiers # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers 'License :: OSI Approved :: MIT License', 'Programming Language :: Python', 'Programming Language :: Python :: 3', 'Programming Language :: Python :: 3.6', 'Programming Language :: Python :: Implementation :: CPython', 'Programming Language :: Python :: Implementation :: PyPy' ], # $ setup.py publish support. cmdclass={ 'upload': UploadCommand, },) 这里面的long_description默认是README.md文件，所以认真把它写好（虽然在这个Demo里我并没有这么做）。另外我们还要选好开源协议，这里简单起见我就选择MIT协议了。 基本上，到这里的话我们的setup.py文件基本就完成了。 发布自己的第一个Package当我们编写好了setup.py之后，我们在命令行中输入以下命令即可将我们的项目在PyPI社区中发布。 1python setup.py upload 这个过程可能需要输入账号密码。 安装自己的项目我们重新开一个PyCharm项目，然后尝试安装我们刚刚上传的包： 1pip install zrchnpypidemo 安装成功之后我们尝试编写如下代码： 123import myfirstpypidemomyfirstpypidemo.print_hello() 点击运行就可以看到控制台输出了hello world。 注意到我们这里能import进来的的不是zrchnpypidemo，而是我们之前项目里面包含的myfirstpypidemo文件。这也告诉我们在构建我们的项目包的时候要对各种文件的命名做一个比较好的设计，避免冲突。 更新自己的Package当我们对自己的项目有了一定的更新后，我们需要把新的版本推送到PyPI社区。这个过程其实相对比较简单。 同样地我们回到MyFirstPypiDemo项目下，首先我们给myfirstpypidemo.py增加一些新功能，比如增加一个print_hello_v2()函数： 1234567891011# myfirstpypidemo.py__version__ = '0.2.0'def print_hello(): print('hello world')def print_hello_v2(): print('hello world v0.2.0')if __name__ == '__main__': pass 完成之后我们在该路径下使用以下命令发布新的版本： 12python setup.py sdistpython setup.py upload 这里第一行命令相当于删除了旧的打包文件然后生成了新文件。 完成上述命令之后，切换到我们的测试项目，就可以通过pip命令来从PyPI社区获得最新版本的Package了： 1pip install --upgrade zrchnpypidemo 可以看到原先的包会被卸载掉，然后新的包会被安装。 最后，我们在测试文件上尝试调用新增加的特性： 1234import myfirstpypidemomyfirstpypidemo.print_hello()myfirstpypidemo.print_hello_v2() 可以看到输出窗口会打印出两个不同的hello world输出，说明我们提交新版本成功。 小结在PyPI社区上发布自己的项目可以让自己造的轮子发挥更好的作用，python社区这些年的发展无不得益于开发者的慷慨分享。作为一个已经使用Python多年的coder，我觉得自己以后有机会的话还是要多多构建和分享一些自己觉得有用的项目，也算对自己工作成果的一个展示吧。 Reference[1] 如何发布自己的Python库？[link][2] setup.py (for humans) [link]","link":"/2021/03/21/%E5%9C%A8PyPI%E7%A4%BE%E5%8C%BA%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AADemo%E9%A1%B9%E7%9B%AE/"},{"title":"大模型推理之路：提示学习+思维链","text":"2022年以来，大模型展现出了令人惊艳的思维推理能力。目前，关于大模型具有这类涌现能力的原因依然众说纷纭。一种主流的说法是，大规模预训练语言模型在代码生成任务上的训练为PLM带来了这一特殊能力。支持这一说法的证据包括，GPT-3系列的模型text-davinci-001并不具备链式思维推理能力，而GPT-3.5系列的text-davinci-002模型则突然具备了这一能力。这两个版本除了在训练数据有一定的差异外，最主要的不同在于，text-davinci-002是在使用了代码生成版本的模型code-davinci-002的基础上训练得到的。因此，GPT-3.5涌现的思维链能力有很大可能是从代码生成模型中继承而来。 对于这一说法，我个人也是比较赞同的。包括在之前试用chatGPT的时候，我曾经为chatGPT设计过一个任务，要求模型实现一个“将字符块垒起得到另一个文字”的功能，即：当我们输入“口”时，函数将返回“品”；当我们输入“日”时，函数将返回“晶”；当我们输入“火”时，函数将返回“焱”。当时采用这几个简单的示例教会了chatGPT我们的这一意图，随后我采用了更加复杂的输入进行测试，包括字符“香”、“龍”、“飛”、“鱼”，最后发现模型能够正确地返回字符“馫”、“龘”、“飝”、“鱻”。从这个例子可以看出，chatGPT确实拥有了非常强大的NLU能力，同时这类能力是受到了其代码生成能力支撑的。因为在上述的例子任务中，NLU模型很难学到这些字符之间的关联，因为在语义上这几个字符之间并没有什么联系。 当然，近期我比较关注的还是思维链（Chain-of-Thought，CoT）相关的工作，这里就结合综述文章[1]简单整理下当前在CoT方面的一些研究。关于Chain-of-Thought这个关键词，在Google scholar上甚至难以找到在2021年以前出现的相关工作，可以说这股热潮是在步入2022年后，随着大规模预训练模型的能力涌现才被带动起来的，属于非常新颖的研究领域。目前而言，CoT技术通常与prompting技术相绑定，因为它不可避免的需要依赖大模型强大的自然语言理解和推理技术。从研究分支上而言，CoT、prompting和推理主要涉及以下两个方面： 增强Prompting中的推理策略。 提示工程：提示工程方法的主要思路是对prompting的内容进行设计，具体又可以分为单阶段方法和多阶段方法。常见的单阶段方法包括：添加带有CoT中间推理步骤的样例，通过few-shot学习来诱导模型在生成答案的同时生成推理过程；或者在问题后面拼接“let’s think step by step”来诱导模型进行zero-shot的答案推理。常见的多阶段方法则通常将一个复杂问题分解为多个子问题，每一轮仅回答一个子问题，在下一轮时将先前的问题和答案作为Context传入，例如Google的Least-to-Most Prompting方法[2]。 推理过程优化：推理过程优化主要是对推理过程的质量进行控制，常见的可以分为自优化方法和集成优化方法。自优化方法通常是引入参数化的优化器，在生成推理步骤时对预测概率进行打分或者过滤，预测生成的推理依据是否可接受。集成优化方法则是从多个推理过程中联合得到最终结果，例如Google Brain的自一致性模型[3]。 外部推理引擎：一些研究工作将问答视为复杂系统，因此会将不适用于语言模型的任务（如物理模拟、数学计算等）进行剥离，由外部的专用引擎进行计算后得到结果，而语言模型则主要负责维持对用户意图的追踪。 增强Prompting中的知识。 利用模型内部知识：大模型中富含的隐式知识可以帮助模型生成推理所需的知识或者推理依据，作为prompting信息的一部分； 利用模型外部知识：同样的，可以通过检索来获取外部知识形成提示来增强推理，例如PROMPTPG和Vote-k等方法； 此外，现有的推理基准任务可以分为五个不同的方向：数学推理、常识推理、逻辑推理、符号推理和多模态推理。具体的基准任务数据集如下： 最后，CoT和基于大模型的推理作为一个非常崭新的研究方向，还有非常多的研究问题亟待解决。一些可能的探索方向包括：预训练模型能够实现推理的理论依据是什么？如何降低模型的计算资源实现高效推理？基于PLM的推理技术仍然存在较大的偏见和毒性，如何实现鲁棒、可信、可解释的推理模型？除了文本模态之外，多模态或者交互式的推理是否有可能？大模型的泛化能力能否推广到推理技术？等等。 Reference[1] Qiao S, Ou Y, Zhang N, et al. Reasoning with Language Model Prompting: A Survey[J]. arXiv preprint arXiv:2212.09597, 2022.[2] Zhou D, Schärli N, Hou L, et al. Least-to-Most Prompting Enables Complex Reasoning in Large Language Models[J]. arXiv preprint arXiv:2205.10625, 2022.[3] Wang X, Wei J, Schuurmans D, et al. Self-consistency improves chain of thought reasoning in language models[J]. arXiv preprint arXiv:2203.11171, 2022.","link":"/2023/01/10/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E4%B9%8B%E8%B7%AF%EF%BC%9A%E6%8F%90%E7%A4%BA%E5%AD%A6%E4%B9%A0-%E6%80%9D%E7%BB%B4%E9%93%BE/"},{"title":"如何修正大模型的错误信念","text":"尽管诸如GPT-3、chatGPT和PALM等AI头部厂商提供的大模型具有非常强大的自然语言理解和生成能力，大模型训练环境和实际生产环境之间的Gap仍然是造成这类模型在企业应用中适配困难的原因。造成这一困难的主要因素有几点： 生产环境下可能包含许多领域特定的知识，这些知识在大规模预训练语言模型的训练语料中并不存在，而试图从PLM中获取一些它本不了解的知识是不现实的。因此，需要设计一种方式将这些领域知识注入PLM，才能够获得符合预期的回答； 当PLM产生了不满足用户预期的答案时，我们需要设计某种机制来修正大模型的错误信念，使得模型能够在下一次回答中纠正其谬误。特别是，OpenAI近期的一系列方法展现出了利用user feedback调优模型的有效性。然而，头部厂商所提供的大规模PLM的参数规模已经远远超出了许多中小型厂商的部署和调参能力。因此，针对这一问题（问题①同理），直接使用领域知识对大规模PLM进行微调往往也是不现实的； 此外，尽管OpenAI近期在ChatGPT等模型上的表现使得未来LMaaS成为可能，企业在使用这类服务时将不可避免地面临敏感数据跨越信任边界的问题，因此如何正确合理地使用外部厂商提供的LM服务仍然有待进一步探讨。 虽然问题③目前还没有引起足够多的探讨，近期已有不少工作开始着手研究问题①和②。本文主要探讨AllenAI(AI2)近期提出的几份研究工作：Leap-of-Thought[1], MemPrompt[2]和TeachMe[3]。 Leap-of-Thought这篇工作基于Roberta模型对LM的推理能力进行了研究，证明了经过训练的LM能够基于隐含的预训练知识和显性的自然语言语句实现可靠的系统推理，并描述了一个自动生成推理数据集的过程。该工作为下面介绍的两篇文章打下了理论基础。 MemPrompt模型的思路则是：采用一个外接的Memory来记录用户的feedback，并利用这些feedback信息修正模型后续的输出。当用户认为模型的输出不符合预期时，可以向模型做出反馈，模型会以键值对的形式保存这些反馈（key-原始问题，value-用户反馈）到外部Memory中。在以后的回答中，模型首先会检索Memory中是否有相关的feedback信息，如果有，则将这些信息结合到prompt中输入给语言模型。 为了达成这一目的，我们需要模型在产生回答的同时产生对用户意图的描述。例如，当用户询问“哪个词与good相似？”时，LM可能输出以下结果“good的近音词是，wood”。这个响应包含了意图“good的近音词”和答案“wood”两个部分。若此时用户可能想要查询近义词而非近音词，就可以产生反馈（或者说，澄清）“相似是指具有相近的意思”。此时，“哪个词与good相似？”和“相似是指具有相近的意思”就会以key-value的形式被存储到Memory中。 具体地，MemPrompt包含三个模块： Memory M：M是一个持续增长的键值对表，包含了用户对该模型的所有历史反馈； Lookup M(x)：表M的查询操作，用于对用户查询进行匹配； Combiner C(x, M(x))：带门控机制的函数，用于过滤掉检索出的不相关feedback。 MemPrompt这一形式也可以应用在大型预训练模型上的Knowledge-grounded QA，特别是当QA不是常识问答而是涉及某些专有领域知识时。这一块涉及的相关工作包括[4-6]等。并且，MemPrompt一个有趣的优点在于，在其设计中用户feedback是针对意图预测而不是答案给出的。也就是说，即使用户不知道答案的正确性，也可以对模型的用户意图理解结果提出改进意见。因此，模型不需要具有领域知识的专家作为用户，同样能够得到有效的反馈意见。当然，这里存在的风险点是，模型可能在给出正确答案的同时给出错误意图，导致用户相信答案包含了错误信息（反之亦然），但是论文作者表示实践中出现这类现象的次数很少，当然这也是后续模型可以考虑改进的一个点。 当然，MemPrompt还存在许多限制。首先，Memory不可能随着用户反馈的数量无限增长，这可能导致模型空间需求和计算时间需求的不断增长。一种可能的解决方式是定期地根据用户反馈微调PLM，使得模型不再需要这些反馈数据，不过这也可能引入新的灾难性遗忘等问题。其次，模型存在一个很强的假设即，所有用户的需求是一致的，这种实现方式没有考虑到用户反馈的多样性问题。此外，如何保证用户反馈的真实可信，以及避免反馈中存在的偏见信息，也是该方法面临的一系列后续挑战。 TeachMe模型可以看作MemPrompt模型加上Chain-of-Thought的一个改进方案。与上篇工作不同的是，模型在回答问题时将给出推导出答案的思维链，而非用户意图。这使得模型更加适合回答需要grounded于常识知识的QA问题。TeachMe设计了多个不同的状况处理分支： 当能够找到回答问题的推理链时，用户可能会产生以下反馈： 答案正确； 缺乏某些事实； 涉及不相关的事实； 存在错误事实； 事实正确但推理过程错误； 对于某些前提进行（进一步）提问； 当模型无法找到回答问题的推理链时，将列举出搜索过程中涉及到的所有前提，并等待用户反馈： 使用其中的某个/些事实； 使用额外的事实； 其中某个被认为错误的事实其实是对的； 综上，TeachMe的目标是实现一个可教学的问答推理系统，用户能够通过交互来纠正模型的错误信念，使模型能够将Memory中检索到的信息作为QA的附加上下文，避免在后续问答推理中出错。论文的模拟试验结果表明，TeachMe系统在不重新训练模型的前提下，只需要25%的训练示例反馈就可以达到完全反馈的近似水平（差距小于1%）。 Reference[1] Talmor A, Tafjord O, Clark P, et al. Leap-of-thought: Teaching pre-trained models to systematically reason over implicit knowledge[J]. Advances in Neural Information Processing Systems, 2020, 33: 20227-20237.[2] Madaan A, Tandon N, Clark P, et al. Memory-assisted prompt editing to improve GPT-3 after deployment[J]. arXiv preprint arXiv:2201.06009, 2022.[3] Dalvi B, Tafjord O, Clark P. Towards teachable reasoning systems[J]. arXiv preprint arXiv:2204.13074, 2022.[4] Pan X, Sun K, Yu D, et al. Improving Question Answering with External Knowledge[C]//Proceedings of the 2nd Workshop on Machine Reading for Question Answering. 2019: 27-37.[5] Guu K, Lee K, Tung Z, et al. Retrieval augmented language model pre-training[C]//International Conference on Machine Learning. PMLR, 2020: 3929-3938.[6] Khandelwal U, Levy O, Jurafsky D, et al. Generalization through memorization: Nearest neighbor language models[J]. arXiv preprint arXiv:1911.00172, 2019.","link":"/2023/01/20/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%AD%A3%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%94%99%E8%AF%AF%E4%BF%A1%E5%BF%B5/"},{"title":"深度强化学习算法的需求分析","text":"深度强化学习技术作为对话策略学习领域一项常用的技术，在我过往的研究经历中也曾大量运用，但是当时在构建和设计深度强化学习模型的时候是基于其他人的研究工作进一步深入探索，很少有机会站在更高的视角去看待深度强化学习这一技术。最近，我阅读了魏宁所著的《深度强化学习落地指南》这本书，感触颇深，因此希望通过对书本内容的梳理，结合自己在任务型对话策略构建过程中的一些浅见谈谈自己的理解。另外我觉得《深度强化学习落地指南》这本书写的非常好，深入浅出且面面俱到，在研究和实践过程中有涉及到深度强化学习技术的读者不妨读一读，许多技术和方案可以据此按图索骥，举一反三。本篇博文基于该书的第一章部分整理，涉及如何选择是否使用DRL技术，以及对该技术的选取在不同维度上的必要性进行分析。 在本书中，魏宁老师将算法工程师的能力归纳为三点： 对各种算法本质及其能力边界的深刻理解 对目标问题内在逻辑的深度分析 对两者结合点的敏锐直觉 其中特别提及的是对于算法能与不能的边界要有清晰的认知，不能当一个挥舞着DRL铁锤的人，将各种问题都看成钉子。深度强化学习算法有着自身的优势和局限性，因此必须对具体的问题进行具体分析。不是所有的需求都适合用DRL解决，适合用DRL解决的需求在性能上也未必超越传统方法。因此，魏宁老师在需求分析阶段提出了四个问题：“是不是”、“值不值”、“能不能”和“边界在哪里”。当然，不只是对于DRL，其实对于一个合格的算法工程师而言，在特定的需求问题面前进行技术分析的时候，都需要对上面四个问题进行解答，才能够确保最终选取的技术方案能够很好地适配目标任务。 1. DRL的“是不是”解决DRL问题首先需要明确Agent和环境的关系。通常情况下DRL任务中有且仅有一个进行决策和行为的主体，我们将其称之为Agent，而将与该Agent进行交互的外部元素称为环境。在更加复杂的问题场景中，一个庞大的系统可能由多个Agent组成（例如一个物流站点自动运输机器人阵列），这种情况下就会存在两套不同的Agent定义方案。第一种思路是将所有的Agent看作一个整体，就像人的双手和双脚可以在大脑的控制下独立活动，同时对于一个人类个体来说它们又是整体的一部分。这种思路能够保证取得全局最优的联合策略，但是其状态空间的维度和策略的复杂度会随着决策主体数量的增加而迅速膨胀，导致算法很难被扩展到大规模问题上。第二种思路则是将每个决策主体都视为独立的Agent，就形成了经典的多智能体强化学习（MARL）问题。这种思路能够避免维度诅咒，但随之而来则会面临Agent间的贡献度分配和联合探索难题[1,2]，以及多策略协同优化导致的环境不稳定问题[1,3,4]。 另一个需要定义清楚的是当前解决的任务是不是一个强化学习问题。我们常说的马尔可夫决策过程（MDP）和部分可观测马尔可夫决策过程（POMDP）就属于通常意义上的完备强化学习，而实际上还存在着一些其它类型的强化学习问题。例如，当环境中不存在特定状态转移概率分布p(s’|s,a)，或者说状态转移完全随机且与动作无关时，MDP问题将退化为上下文多臂老虎机（CMAB）问题；而进一步的，如果环境中不存在状态的概念，或者说只有一个状态且没有状态转移，问题会进一步退化为多臂老虎机（MAB）问题。CMAB和MAB属于广义的强化学习范畴，且他们都有各自最有针对性的解决方案[5-7]，因此在实践中通常与完备强化学习问题区分开。 2. DRL的“值不值”在使用DRL解决一个初步定义为MDP的任务之前，首先需要判断这个任务通过规则、启发式搜索或者经典的强化学习算法是否能够解决。在一些经典的强化学习示例（如一阶倒立摆）中，这些任务的状态和动作空间维度很小，或者由于附加了限制使得实际解空间非常小，往往能够通过观察分析来总结规律，并通过一系列if-else规则或者启发式搜索来解决这类问题。诸如小车爬坡等任务虽然具有较高的解空间维度，同样可以通过数学建模的方式构建起状态与动作之间的联系来解决。换言之，在使用DRL的实际落地应用中，“应该追求条件允许范围内的最有定制化方案。这些方案可能抓住了底层的物理和数学本质，可能充分挖掘了任务逻辑和先验知识，可能将计算机的强大算力发挥到了极致，甚至可能通过主动设置高度可控的应用场景规避了很多棘手问题，从而使得它们在效率和性能方面具有显著优势”。通过对不同方法的探索，我们能够更直观的认识的现有的方法所能触及的性能上下限，至少可以将已有的方法作为强大的Baseline，帮助我们对DRL的价值进行评估。 与此同时，在解空间可穷举、规模适中的前提下，传统的强化学习算法如Q-Learning和Sarsa等的表现也可能比DRL算法更好。由于Q-Learning和Sarsa以表格形式直接存储和更新状态-动作组合的值估计，不需要通过神经网络拟合，在调参难度和训练稳定性方面往往优于DRL算法。同样的任务采用Q-Learning的表现比DQN更好的情况时有发生，这是由于在规模可控的任务解空间中，神经网络尚不足以表现出相对于表格的优势。 当然，魏宁老师在本书中同样给出了使用DRL的三个理由，原文摘录如下： 难以从庞大的解空间中分析出有效规则和启发式搜索方案，或者解空间中可能存在比已有规则和启发式搜索更好的方案； 解空间维度过高或不可穷举，基于表格值估计的传统强化学习算法（如Q-Learning）在存储空间和计算效率上遇到瓶颈； 类似于二维图像和长跨度时序信息等高位状态信息中包含大量冗余成分，有赖于深度神经网络的强大特征提取能力，从中提炼出有用的高层抽象语义特征，并建立起长期决策相关性。 总结而言，对于DRL是否适合某项任务的落地，其一看是否能够从已知的数据中挖掘到有效的规则和解决方案，强化学习强大的一个地方是能够通过奖励去寻找合适的策略，但是如果这个较优的策略或解法我们已经找到了，并且能够通过一些规则进行描述，则可能不需要用DRL这把牛刀来杀鸡；其二是看基于表格值估计的方法是否存在计算存储瓶颈，因为DRL相比于经典RL算法是对状态和动作进行了低维的向量化表示，能够在一定程度上缓解维度灾难，但同时也可能会需要更多的数据进行语义学习，因此在经典RL算法开销不大的情况下，是不可以轻易忽略经典方法的；其三是看输入特征是否过于庞大，例如电子竞技AI的实现中，画面中包含的信息量非常多，人为进行特征工程的开销将非常高昂。此时我们可以利用深度神经网络的特征提取能力来克服这一困难。 3. DRL的“能不能”除了对使用DRL的必要性进行评估之外，真实的项目落地环境是否满足场景固定和数据廉价两个要求，对于DRL的应用能否开展而言至关重要。前者直接决定了训练后得到的策略能否顺利迁移到部署环境并维持训练阶段所展现出的高性能，而后者决定了是否有充足的数据来保证DRL模型的收敛。 尽管强化学习被批评为唯一允许在训练集上进行测试的算法，在本书的作者看来，DRL与有监督学习一样追求的是独立同分布下的内插泛化能力。相比之下，有监督学习只是对训练集和测试集进行了更加严格的划分而使得两者完全没有交集；而DRL并未违反独立同分布的定义，测试样本在训练过程中出现的概率也会随着任务解空间的增大而下降。考虑到RL问题相比于监督学习更加困难，适当放松训练和测试的限制无可厚非。 而在DRL的实际落地应用中，我们更需要关注的是任务中的“两个一致”是否成立。一方面是状态分布的一致，简而言之就是在训练和测试阶段环境的固有属性需要保持一致。针对这个问题，一种有效手段是对原始信息进行抽象化处理，实现DRL算法的泛化和推广。值得注意的是，并非所有的任务都能通过抽象化预处理来保证状态分布的一致性。例如，如果我们在训练环境中使用地图A来训练扫地机器人，但在生产环境中机器人所在的环境是地图B，就有可能出现策略失效。解决这一问题的方法是在训练环境中使用随机地图进行训练，使得机器人能够学习到更通用的导航知识，从而在同分布的陌生地图上内插泛化。另一方面则是状态转移概率分布一致，也就是要求Agent在任意状态s下采取动作a后，进入下一个状态s’的概率分布p(s’|s,a)保持不变。其实我个人感觉这两个点的核心是一致的，就是训练和测试应该在相同的环境上进行，或者说训练环境要最大限度地与测试环境相接近，否则就会面临现实鸿沟（Reality Gap）问题。解决这个问题的思路，更多的还是通过扩大训练数据的范围，使得Agent在陌生环境也能够应对自如。 这里再结合一下我个人做对话策略模型时的一些例子。事实上我们目前研究对话策略模型的时候都是采用基于规则的用户模拟器来帮助策略的学习，此时由规则操控的用户模拟器不具备多样性，其表现与真实生产环境下的人类用户表现相去甚远。因此我们难免会面临策略模型失效的问题。当然，在我们近期的研究中，我们试图在进行用户的模拟时加入一些用户的性格和情感信息，实现模拟用户的个性化。这一个过程实际上丰富了策略模型所面临的学习环境，加强了策略模型在同分布的数据上的内插泛化能力，从而使得我们的对话策略模型能有更好的表现。 另一方面，由于强化学习缺乏高效的监督信号，DRL始终面临着低样本效率的问题。因此在DRL问题中我们需要从四个维度考量训练数据：多、快、好、费。与此同时，DRL需要Agent在环境中充分探索，在前期策略性能较差时不合理的动作十分普遍。如果直接将其应用于电商、短视频等场景，所带来的较差的用户体验往往会导致客户流失，这意味着直接经济损失，同样也是不可忽略的成本之一。 4. DRL的“边界在哪里”尽管目前端到端的学习是DRL以至于深度学习的发展趋势，但魏宁老师建议在实践中仅把任务的核心功能模块定义为强化学习问题并交给DRL算法解决，而其他次要模块则要根据各自的特点选择最合适的方案，甚至采用多个独立的策略负责不同的功能模块并将其进行组合。这种做法有一些显而易见的好处，包括： 简化复杂任务的问题定义，避免将特点迥异的子功能模块强行糅合处理； 充分利用各种先验知识，从而提高整体性能； 压缩具体问题解空间，降低DRL算法的学习难度 总而言之，尽管End-to-End是目前学术研究的大趋势，在实际项目落地过程中我们仍然需要发挥各种不同算法的优势，取长补短打好组合拳，才能够取得最好的模型效果。 Reference[1] Panait L, Luke S. Cooperative multi-agent learning: The state of the art[J]. Autonomous agents and multi-agent systems, 2005, 11(3): 387-434.[2] Foerster J, Farquhar G, Afouras T, et al. Counterfactual multi-agent policy gradients[C]//Proceedings of the AAAI Conference on Artificial Intelligence. 2018, 32(1).[3] Khan A, Zhang C, Lee D D, et al. Scalable centralized deep multi-agent reinforcement learning via policy gradients[J]. arXiv preprint arXiv:1805.08776, 2018.[4] Al-Shedivat M, Bansal T, Burda Y, et al. Continuous adaptation via meta-learning in nonstationary and competitive environments[J]. arXiv preprint arXiv:1710.03641, 2017.[5] Gittins J C. Bandit processes and dynamic allocation indices[J]. Journal of the Royal Statistical Society: Series B (Methodological), 1979, 41(2): 148-164.[6] Auer P, Cesa-Bianchi N, Fischer P. Finite-time analysis of the multiarmed bandit problem[J]. Machine learning, 2002, 47(2): 235-256.[7] Bubeck S, Munos R, Stoltz G. Pure exploration in finitely-armed and continuous-armed bandits[J]. Theoretical Computer Science, 2011, 412(19): 1832-1852.","link":"/2021/10/28/%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"},{"title":"谷歌LaMDA模型","text":"LaMDA是一个特定用于对话的Transformer-based语言模型。尽管LM规模的增大能够改善生成质量，但这种方式在safety和groundedness两方面的改善较少。文章表明使用带注释的数据进行微调，并使得模型能够查询外部知识，能够显著对话生成中的safety和groundedness属性。 论文在quality、safety和groundedness三个指标上探索模型规模对于LaMDA的影响。发现：（1）单独改善模型规模有助于提高生成quality，尽管其safety和groundedness远远落后于人类水平；（2）增加规模+微调有助于缩小模型在后两个指标上与人类研究者的差距。 （一）LaMDA预训练LaMDA模型采用类似于语言模型的方式进行训练，根据已有的context预测下一个token。不同于以往进采用对话数据集进行训练的方法，LaMDA在公共对话数据集和其他公共Web文档数据集上进行预训练。因此，尽管LaMDA是专门面向对话构建的，其本质仍是一个语言模型。 （二）评估目标LaMDA模型使用SSI、Safety和Groundedness三个指标进行评估对话代理的基本质量，并且关注Helpfulness和Role consistency两方面的效果。关于指标我们在另一篇博客《对话系统评估指标》中进行了讨论，这里不再赘述。 （三）LaMDA微调论文同时采用了生成任务和判别任务来微调LaMDA，从而得到一个既可以作为生成器又可以作为判别器的单一模型。所有的fine-tune生成示例都可以表示为“ ”的形式，并且只针对生成的响应部分计算loss。比如“what’s up? RESPONSE not much.”；而判别示例则可以表示为“ ”，并且只对后面的rating部分计算loss。例如“what’s up? RESPONSE not much. SENSIBLE 1”。 在使用LaMDA进行生成后，首先会过滤掉safety预测低于阈值的候选响应，然后再根据其质量对候选响应进行排序。其中，Sensitive的权重时Specificity和Interestingness的三倍。得分最高的候选将作为下一个回答。 此外，这类基于LM的对话模型还存在知识相关问题。一方面，模型倾向于记住和模仿其所训练过的数据的内容，并且生成与这些训练数据风格相似的回答。而另一方面，知识往往会随着时间推移（也称为时间泛化问题），这一问题即使是通过增大模型和训练数据规模也很难解决。 为此，LaMDA提出一个工具集，包含信息检索系统、计算器和翻译器。工具集TS能够接受单个字符串作为输入，并输出一个或多个字符串。TS会在每个工具上都尝试输入字符串，并且将其结果按照{计算器、翻译、检索系统}的顺序进行拼接。如果工具无法解析对应的输入，则会返回一个空的结果列表，因此不会对最终输出作出贡献。 随后，可以对LaMDA进行微调以执行两个任务：（1）基于多轮对话context生成一个传输到TS的查询语句；（2）根据TS返回的片段生成对话响应。由于LaMDA有可能生成一些背离现实知识的对话，论文采用了一个迭代优化的方式生成答案，如图1所示： 模型先生成一个草稿回复 生成过程中自动识别到应该去搜索，于是又开始生成「TS，搜索词…」 拿到搜索结果后聚合，生成最终结果「User，结果…」","link":"/2022/11/13/%E8%B0%B7%E6%AD%8CLaMDA%E6%A8%A1%E5%9E%8B/"}],"tags":[{"name":"BERT","slug":"BERT","link":"/tags/BERT/"},{"name":"环境搭建","slug":"环境搭建","link":"/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"name":"numpy","slug":"numpy","link":"/tags/numpy/"},{"name":"LLM","slug":"LLM","link":"/tags/LLM/"},{"name":"NLP","slug":"NLP","link":"/tags/NLP/"},{"name":"智能对话","slug":"智能对话","link":"/tags/%E6%99%BA%E8%83%BD%E5%AF%B9%E8%AF%9D/"},{"name":"xgboost","slug":"xgboost","link":"/tags/xgboost/"},{"name":"Frame Semantic Parsing","slug":"Frame-Semantic-Parsing","link":"/tags/Frame-Semantic-Parsing/"},{"name":"Transformer","slug":"Transformer","link":"/tags/Transformer/"},{"name":"In-Context Learning","slug":"In-Context-Learning","link":"/tags/In-Context-Learning/"},{"name":"pypi","slug":"pypi","link":"/tags/pypi/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"Chain-of-Thought","slug":"Chain-of-Thought","link":"/tags/Chain-of-Thought/"},{"name":"ChatGPT","slug":"ChatGPT","link":"/tags/ChatGPT/"},{"name":"需求分析","slug":"需求分析","link":"/tags/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"},{"name":"RL","slug":"RL","link":"/tags/RL/"},{"name":"软件工程","slug":"软件工程","link":"/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"}],"categories":[{"name":"自然语言处理","slug":"自然语言处理","link":"/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"},{"name":"机器学习","slug":"机器学习","link":"/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"论文速递","slug":"论文速递","link":"/categories/%E8%AE%BA%E6%96%87%E9%80%9F%E9%80%92/"},{"name":"强化学习","slug":"强化学习","link":"/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"}],"pages":[{"title":"关于我","text":"我目前在华为技术有限公司担任高级工程师、AI算法研究员，主要涉及智能对话、人工智能生成内容（AIGC）、自然语言处理等研究方向。于2021年获得华南理工大学软件工程直攻博士学位；于2015年获得华南理工大学软件工程工学学士学位。过往的研究方向主要涉及人机对话、强化学习和人工智能等。近年来共有15篇论文发表在包括AAAI、ICASSP、NLPCC等顶级会议及IEEE Transactions on Human-Machine Systems、Neurocomputing等知名期刊在内的会议和刊物。 以下是我在学术网站上的页面： Google Scholar, Semantic Scholar, DBLP。 主要经历高级工程师、AI算法研究员， 2022.01-至今 &gt; 华为技术有限公司（Huawei） 博士， 2015.09-2021.12 &gt; 华南理工大学（SCUT），软件工程 工学学士， 2011.09-2015.06 &gt; 华南理工大学（SCUT），软件工程","link":"/about/index.html"},{"title":"论文&amp;项目","text":"已发表论文Knowledge-augmented Frame Semantic Parsing with Hybrid Prompt-tuningRui Zhang, Yajing Sun, Jingyuan Yang and Wei Peng. In ICASSP, 2023. (CCF-B类会议) Automatic Arabic Grammar Correction based on Expectation Maximization Routing and Target-Bidirectional AgreementAiman Solyman, Zhenyu Wang, Qian Tao, Arafat Abdulgader, Rui Zhang, and Zeinab Aleibieid. In Knowledge-Based Systems, 2022. (CCF-C类期刊, JCR Q1, IF=8.139) Emotion-Sensitive Deep Dyna-Q Learning for Task-Completion Dialogue Policy LearningRui Zhang, Zhenyu Wang, Mengdan Zheng, Yangyang Zhao, and Zhenhua Huang. In Neurocomputing, 2021. (CCF-C类期刊, JCR Q1, IF=4.438) Predicting Emotion Reactions for Human-Computer Conversation: A Variational ApproachRui Zhang, Zhenyu Wang, Zhenhua Huang, Li Li, and Mengdan Zheng. In IEEE Transactions on Human-Machine Systems, 2021. (CCF-B类期刊, JCR Q1, IF=3.374) Melodic Phrase Attention Network for Symbolic Data-based Music Genre Classification (Student Abstract)Li Li, Rui Zhang, and Zhenyu Wang. In Proceedings of the AAAI Conference on Artificial Intelligence (AAAI), 2021. (CCF-A类会议) Learning Bi-directional Social Influence in Information Cascades using Graph Sequence Attention NetworksZhenhua Huang , Zhenyu Wang , Rui Zhang, Yangyang Zhao, and Dongfa Zheng. In Companion Proceedings of the Web Conference (WWW), 2020. (CCF-A类会议) Dynamic Reward-based Dueling Deep Dyna-Q: Robust Policy Learning in Noisy EnvironmentsYangyang Zhao, Zhenyu Wang, Kai Yin, Rui Zhang, and Zhenhua Huang. In Proceedings of the AAAI Conference on Artificial Intelligence (AAAI), 2020. (CCF-A 类会议) 基于大规模结构化病例数据的新型冠状病毒传播特征和感染人群分析黄振华, 王振宇, 江莉, 张睿, 雷昶, 刘星炜, and 谢晓辉. In 中国科学: 信息科学, 2020. (CCF-A类中文期刊) 任务型对话系统研究综述赵阳洋, 王振宇, 王佩, 杨添, 张睿, and 尹凯. In 计算机学报, 2020. (CCF-A类中文期刊) Emotional Text Generation Based on Cross-Domain Sentiment TransferRui Zhang, Zhenyu Wang, Kai Yin, and Zhenhua Huang. In IEEE Access, 2019. (JCR Q1期刊, IF=3.745) Cascade2vec: Learning Dynamic Cascade Representation by Recurrent Graph Neural NetworksZhenhua Huang, Zhenyu Wang, and Rui Zhang. In IEEE Access, 2019. (JCR Q1期刊, IF=3.745) 基于标签深度分析的音乐自动标注算法王振宇, 张睿, 高雨轩, and 萧永乐. In 华南理工大学学报 (自然科学版), 2019. (EI-中文期刊) Learning to Converse Emotionally Like Humans: A Conditional Variational ApproachRui Zhang and Zhenyu Wang. In CCF International Conference on Natural Language Processing and Chinese Computing (NLPCC), 2018. (CCF-C类会议) Building Emotional Conversation Systems using Multi-task Seq2Seq LearningRui Zhang, Zhenyu Wang, and Dongcheng Mai. In CCF International Conference on Natural Language Processing and Chinese Computing (NLPCC), 2017. (CCF-C类会议) MMCRD: An Effective Algorithm for Deploying Monitoring Point on Social NetworkZehao Guo, Zhenyu Wang, and Rui Zhang. In China Conference on Knowledge Graph and Semantic Computing (CCKS), 2018.(EI会议)","link":"/papers/index.html"}]}